// <auto-generated />
using System;
using AmplifyNash.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AmplifyNash.Migrations
{
    [DbContext(typeof(AmplifyNashDbContext))]
    partial class AmplifyNashDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AmplifyNash.Models.Band", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ConcertId")
                        .HasColumnType("integer");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsHeadliner")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ConcertId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Bands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bio = "From the vibrant city of Austin, Texas, formed in 2010. Indie rock enchantment at its finest.",
                            Genre = "Indie Rock",
                            IsHeadliner = true,
                            Name = "Lunar Essence",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 2,
                            Bio = "Hailing from the eclectic city of Seattle, Washington, formed in 2013. Alternative rock pushing the boundaries.",
                            Genre = "Rock",
                            IsHeadliner = true,
                            Name = "Sonic Catalyst",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 3,
                            Bio = "Emerging from the creative hub of Los Angeles, California, formed in 2012. Indie pop melodies that resonate with the soul.",
                            Genre = "Indie Pop",
                            IsHeadliner = true,
                            Name = "Aurora Melodies",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 4,
                            Bio = "Born in the lively city of Nashville, Tennessee, formed in 2008. Rock anthems with a revolutionary spirit.",
                            Genre = "Rock",
                            IsHeadliner = true,
                            Name = "Rebel Resonance",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 5,
                            Bio = "From the serene city of Portland, Oregon, formed in 2015. Dreamy indie rock under the starry sky.",
                            Genre = "Indie Rock",
                            IsHeadliner = true,
                            Name = "Whispering Echoes",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 6,
                            Bio = "Infusing colors into soundwaves, based in San Francisco, California, formed in 2014. Indie electro-pop exploration.",
                            Genre = "Indie Electro-Pop",
                            IsHeadliner = false,
                            Name = "Electric Hues",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 7,
                            Bio = "Building grooves in the heart of New York City, formed in 2011. Fusion of funk, soul, and jazz.",
                            Genre = "Funk/Soul/Jazz Fusion",
                            IsHeadliner = false,
                            Name = "Urban Groove Collective",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 8,
                            Bio = "Painting the musical canvas from Chicago, Illinois, formed in 2016. Synth-driven alt-rock landscapes.",
                            Genre = "Alternative Rock",
                            IsHeadliner = false,
                            Name = "Neon Skylines",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 9,
                            Bio = "Harmonizing in the misty streets of New Orleans, Louisiana, formed in 2017. Soulful indie melodies with a touch of jazz.",
                            Genre = "Indie/Soul/Jazz Fusion",
                            IsHeadliner = false,
                            Name = "Crimson Harmony",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 10,
                            Bio = "Channeling mystic vibes from Santa Fe, New Mexico, formed in 2019. Psychedelic rock explorations.",
                            Genre = "Psychedelic Rock",
                            IsHeadliner = false,
                            Name = "Mystic Soundwaves",
                            UserProfileId = 1
                        });
                });

            modelBuilder.Entity("AmplifyNash.Models.BandConcert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BandId")
                        .HasColumnType("integer");

                    b.Property<int>("ConcertId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BandId");

                    b.HasIndex("ConcertId");

                    b.ToTable("BandConcerts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BandId = 1,
                            ConcertId = 1
                        },
                        new
                        {
                            Id = 2,
                            BandId = 1,
                            ConcertId = 2
                        },
                        new
                        {
                            Id = 3,
                            BandId = 2,
                            ConcertId = 3
                        },
                        new
                        {
                            Id = 4,
                            BandId = 2,
                            ConcertId = 4
                        },
                        new
                        {
                            Id = 5,
                            BandId = 3,
                            ConcertId = 5
                        },
                        new
                        {
                            Id = 6,
                            BandId = 3,
                            ConcertId = 6
                        },
                        new
                        {
                            Id = 7,
                            BandId = 4,
                            ConcertId = 7
                        },
                        new
                        {
                            Id = 8,
                            BandId = 4,
                            ConcertId = 8
                        },
                        new
                        {
                            Id = 9,
                            BandId = 5,
                            ConcertId = 9
                        },
                        new
                        {
                            Id = 10,
                            BandId = 5,
                            ConcertId = 10
                        },
                        new
                        {
                            Id = 11,
                            BandId = 6,
                            ConcertId = 1
                        },
                        new
                        {
                            Id = 12,
                            BandId = 7,
                            ConcertId = 1
                        },
                        new
                        {
                            Id = 13,
                            BandId = 6,
                            ConcertId = 2
                        },
                        new
                        {
                            Id = 14,
                            BandId = 7,
                            ConcertId = 2
                        },
                        new
                        {
                            Id = 15,
                            BandId = 8,
                            ConcertId = 3
                        },
                        new
                        {
                            Id = 16,
                            BandId = 9,
                            ConcertId = 3
                        },
                        new
                        {
                            Id = 17,
                            BandId = 8,
                            ConcertId = 4
                        },
                        new
                        {
                            Id = 18,
                            BandId = 9,
                            ConcertId = 4
                        },
                        new
                        {
                            Id = 19,
                            BandId = 10,
                            ConcertId = 5
                        },
                        new
                        {
                            Id = 20,
                            BandId = 9,
                            ConcertId = 5
                        },
                        new
                        {
                            Id = 21,
                            BandId = 8,
                            ConcertId = 6
                        },
                        new
                        {
                            Id = 22,
                            BandId = 6,
                            ConcertId = 6
                        },
                        new
                        {
                            Id = 23,
                            BandId = 7,
                            ConcertId = 7
                        },
                        new
                        {
                            Id = 24,
                            BandId = 10,
                            ConcertId = 7
                        },
                        new
                        {
                            Id = 25,
                            BandId = 8,
                            ConcertId = 8
                        },
                        new
                        {
                            Id = 27,
                            BandId = 8,
                            ConcertId = 9
                        },
                        new
                        {
                            Id = 29,
                            BandId = 6,
                            ConcertId = 10
                        },
                        new
                        {
                            Id = 30,
                            BandId = 10,
                            ConcertId = 10
                        });
                });

            modelBuilder.Entity("AmplifyNash.Models.BandMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BandId")
                        .HasColumnType("integer");

                    b.Property<string>("Instrument")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BandId");

                    b.ToTable("BandMembers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BandId = 1,
                            Instrument = "Lead Guitar",
                            Name = "Adam Turner"
                        },
                        new
                        {
                            Id = 2,
                            BandId = 1,
                            Instrument = "Vocals",
                            Name = "Emma Harris"
                        },
                        new
                        {
                            Id = 3,
                            BandId = 1,
                            Instrument = "Bass",
                            Name = "Ryan Thompson"
                        },
                        new
                        {
                            Id = 4,
                            BandId = 1,
                            Instrument = "Drums",
                            Name = "Mia Jackson"
                        },
                        new
                        {
                            Id = 5,
                            BandId = 2,
                            Instrument = "Bass",
                            Name = "Jordan Wilson"
                        },
                        new
                        {
                            Id = 6,
                            BandId = 2,
                            Instrument = "Guitar",
                            Name = "Ava Robinson"
                        },
                        new
                        {
                            Id = 7,
                            BandId = 2,
                            Instrument = "Vocals",
                            Name = "Ethan Turner"
                        },
                        new
                        {
                            Id = 8,
                            BandId = 2,
                            Instrument = "Drums",
                            Name = "Sophia Evans"
                        },
                        new
                        {
                            Id = 9,
                            BandId = 3,
                            Instrument = "Drums",
                            Name = "Nathan Scott"
                        },
                        new
                        {
                            Id = 10,
                            BandId = 3,
                            Instrument = "Guitar",
                            Name = "Olivia Reed"
                        },
                        new
                        {
                            Id = 11,
                            BandId = 3,
                            Instrument = "Vocals",
                            Name = "Aiden Murphy"
                        },
                        new
                        {
                            Id = 12,
                            BandId = 3,
                            Instrument = "Bass",
                            Name = "Zoe Turner"
                        },
                        new
                        {
                            Id = 13,
                            BandId = 4,
                            Instrument = "Bass",
                            Name = "Elijah Miller"
                        },
                        new
                        {
                            Id = 14,
                            BandId = 4,
                            Instrument = "Vocals",
                            Name = "Chloe Davis"
                        },
                        new
                        {
                            Id = 15,
                            BandId = 4,
                            Instrument = "Drums",
                            Name = "Isaac Parker"
                        },
                        new
                        {
                            Id = 16,
                            BandId = 4,
                            Instrument = "Guitar",
                            Name = "Lily Brooks"
                        },
                        new
                        {
                            Id = 17,
                            BandId = 5,
                            Instrument = "Vocals",
                            Name = "Owen Harris"
                        },
                        new
                        {
                            Id = 18,
                            BandId = 5,
                            Instrument = "Guitar",
                            Name = "Grace Turner"
                        },
                        new
                        {
                            Id = 19,
                            BandId = 5,
                            Instrument = "Bass",
                            Name = "Lucas Foster"
                        },
                        new
                        {
                            Id = 20,
                            BandId = 5,
                            Instrument = "Drums",
                            Name = "Ella Reed"
                        },
                        new
                        {
                            Id = 21,
                            BandId = 6,
                            Instrument = "Guitar",
                            Name = "Liam Anderson"
                        },
                        new
                        {
                            Id = 22,
                            BandId = 6,
                            Instrument = "Vocals",
                            Name = "Ava Martinez"
                        },
                        new
                        {
                            Id = 23,
                            BandId = 6,
                            Instrument = "Bass",
                            Name = "Noah White"
                        },
                        new
                        {
                            Id = 24,
                            BandId = 6,
                            Instrument = "Drums",
                            Name = "Harper Thompson"
                        },
                        new
                        {
                            Id = 25,
                            BandId = 7,
                            Instrument = "Drums",
                            Name = "Mason Turner"
                        },
                        new
                        {
                            Id = 26,
                            BandId = 7,
                            Instrument = "Guitar",
                            Name = "Lily Harris"
                        },
                        new
                        {
                            Id = 27,
                            BandId = 7,
                            Instrument = "Vocals",
                            Name = "Elijah Robinson"
                        },
                        new
                        {
                            Id = 28,
                            BandId = 7,
                            Instrument = "Bass",
                            Name = "Zoey Miller"
                        },
                        new
                        {
                            Id = 29,
                            BandId = 8,
                            Instrument = "Bass",
                            Name = "Logan Scott"
                        },
                        new
                        {
                            Id = 30,
                            BandId = 8,
                            Instrument = "Guitar",
                            Name = "Mia Foster"
                        },
                        new
                        {
                            Id = 31,
                            BandId = 8,
                            Instrument = "Vocals",
                            Name = "Carter Reed"
                        },
                        new
                        {
                            Id = 32,
                            BandId = 8,
                            Instrument = "Drums",
                            Name = "Emma Davis"
                        },
                        new
                        {
                            Id = 33,
                            BandId = 9,
                            Instrument = "Drums",
                            Name = "Wyatt Parker"
                        },
                        new
                        {
                            Id = 34,
                            BandId = 9,
                            Instrument = "Guitar",
                            Name = "Ava Turner"
                        },
                        new
                        {
                            Id = 35,
                            BandId = 9,
                            Instrument = "Vocals",
                            Name = "Owen Murphy"
                        },
                        new
                        {
                            Id = 36,
                            BandId = 9,
                            Instrument = "Bass",
                            Name = "Isabella Brooks"
                        },
                        new
                        {
                            Id = 37,
                            BandId = 10,
                            Instrument = "Vocals",
                            Name = "Jackson Harris"
                        },
                        new
                        {
                            Id = 38,
                            BandId = 10,
                            Instrument = "Guitar",
                            Name = "Scarlett Turner"
                        },
                        new
                        {
                            Id = 39,
                            BandId = 10,
                            Instrument = "Bass",
                            Name = "Ethan Foster"
                        },
                        new
                        {
                            Id = 40,
                            BandId = 10,
                            Instrument = "Drums",
                            Name = "Sofia Reed"
                        });
                });

            modelBuilder.Entity("AmplifyNash.Models.Concert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TicketsSold")
                        .HasColumnType("integer");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VenueId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VenueId");

                    b.ToTable("Concerts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketsSold = 120,
                            Time = "7:00 PM",
                            VenueId = 1
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2024, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketsSold = 110,
                            Time = "8:30 PM",
                            VenueId = 2
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2024, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketsSold = 105,
                            Time = "6:45 PM",
                            VenueId = 3
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2024, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketsSold = 100,
                            Time = "9:15 PM",
                            VenueId = 4
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2024, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketsSold = 120,
                            Time = "7:30 PM",
                            VenueId = 5
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateTime(2024, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketsSold = 110,
                            Time = "8:00 PM",
                            VenueId = 1
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateTime(2024, 2, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketsSold = 105,
                            Time = "6:15 PM",
                            VenueId = 2
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateTime(2024, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketsSold = 100,
                            Time = "9:45 PM",
                            VenueId = 3
                        },
                        new
                        {
                            Id = 9,
                            Date = new DateTime(2024, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketsSold = 120,
                            Time = "7:45 PM",
                            VenueId = 4
                        },
                        new
                        {
                            Id = 10,
                            Date = new DateTime(2024, 2, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketsSold = 110,
                            Time = "8:15 PM",
                            VenueId = 5
                        });
                });

            modelBuilder.Entity("AmplifyNash.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "101 Main Street",
                            FirstName = "Admina",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            LastName = "Strator"
                        });
                });

            modelBuilder.Entity("AmplifyNash.Models.Venue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Venues");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "917 Woodland St, Nashville, TN 37206",
                            Capacity = 150,
                            Name = "Basement East",
                            PhoneNumber = "(615) 645-9174",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 2,
                            Address = "818 3rd Ave S, Nashville, TN 37210",
                            Capacity = 700,
                            Name = "3rd and Lindsley",
                            PhoneNumber = "(615) 259-9891",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 3,
                            Address = "1 Cannery Row, Nashville, TN 37203",
                            Capacity = 225,
                            Name = "The High Watt",
                            PhoneNumber = "(615) 251-3020",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 4,
                            Address = "1604 8th Ave S, Nashville, TN 37203",
                            Capacity = 300,
                            Name = "The Basement",
                            PhoneNumber = "(615) 254-8006",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 5,
                            Address = "2208 Elliston Pl, Nashville, TN 37203",
                            Capacity = 125,
                            Name = "Exit/In",
                            PhoneNumber = "(615) 321-3340",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 6,
                            Address = "2412 Gallatin Ave, Nashville, TN 37206",
                            Capacity = 100,
                            Name = "The East Room",
                            PhoneNumber = "(615) 335-3137",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 7,
                            Address = "2511 Gallatin Ave, Nashville, TN 37206",
                            Capacity = 350,
                            Name = "The Cobra Nashville",
                            PhoneNumber = "(615) 226-4875",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 8,
                            Address = "2219 Elliston Pl, Nashville, TN 37203",
                            Capacity = 275,
                            Name = "The End",
                            PhoneNumber = "(615) 321-4457",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 9,
                            Address = "402 12th Ave S, Nashville, TN 37203",
                            Capacity = 145,
                            Name = "The Station Inn",
                            PhoneNumber = "(615) 255-3307",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 10,
                            Address = "1 Cannery Row, Nashville, TN 37203",
                            Capacity = 210,
                            Name = "Mercy Lounge",
                            PhoneNumber = "(615) 251-3020",
                            UserProfileId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            ConcurrencyStamp = "3b799082-5dea-40b2-b487-8c7acf3ae3d1",
                            Name = "Admin",
                            NormalizedName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b310907-f222-439f-b197-362bf3351b7f",
                            Email = "admina@strator.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEFHJNkS3mzzP8r74jEkVty0c2SIms9BxAaui3loyO6jesYkjeAB7GsM1yurk4w+qyQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0642d602-0ba0-4ade-a774-34c163e42c6d",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AmplifyNash.Models.Band", b =>
                {
                    b.HasOne("AmplifyNash.Models.Concert", null)
                        .WithMany("Bands")
                        .HasForeignKey("ConcertId");

                    b.HasOne("AmplifyNash.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("AmplifyNash.Models.BandConcert", b =>
                {
                    b.HasOne("AmplifyNash.Models.Band", "Band")
                        .WithMany()
                        .HasForeignKey("BandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmplifyNash.Models.Concert", "Concert")
                        .WithMany()
                        .HasForeignKey("ConcertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Band");

                    b.Navigation("Concert");
                });

            modelBuilder.Entity("AmplifyNash.Models.BandMember", b =>
                {
                    b.HasOne("AmplifyNash.Models.Band", null)
                        .WithMany("BandMembers")
                        .HasForeignKey("BandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AmplifyNash.Models.Concert", b =>
                {
                    b.HasOne("AmplifyNash.Models.Venue", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("AmplifyNash.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("AmplifyNash.Models.Venue", b =>
                {
                    b.HasOne("AmplifyNash.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AmplifyNash.Models.Band", b =>
                {
                    b.Navigation("BandMembers");
                });

            modelBuilder.Entity("AmplifyNash.Models.Concert", b =>
                {
                    b.Navigation("Bands");
                });
#pragma warning restore 612, 618
        }
    }
}
